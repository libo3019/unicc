#
# Automake targets
#

bin_PROGRAMS = unicc$(EXEEXT)

if WITH_BOOTSTRAP
noinst_PROGRAMS = boot_min_lalr1$(EXEEXT) \
					unicc_boot1$(EXEEXT) \
					unicc_boot2$(EXEEXT) \
					unicc_boot3$(EXEEXT)
endif

man1_MANS = unicc.man

uniccdir = $(datadir)/unicc
targetsdir = $(uniccdir)/targets
dist_targets_DATA = targets/c.tlt \
					targets/c++.tlt \
					targets/python.tlt \
					targets/javascript.tlt \
					targets/json.tlt

dist_unicc_DATA = unicc.dtd LICENSE README.md

AM_CPPFLAGS = -DTLTDIR=\"$(targetsdir)\"

#
# All sources except the grammar parser are equal in all bootstrappers.
#

SOURCES	= 	\
	lib/phorward.c \
	mem.c \
	error.c \
	first.c \
	lalr.c \
	utils.c \
	string.c \
	integrity.c \
	virtual.c \
	rewrite.c \
	debug.c \
	lex.c \
	list.c \
	build.c \
	buildxml.c \
	main.c \
	xml.c

if WITH_BOOTSTRAP

BUILT_SOURCES	=	\
				parse_boot1.c \
				parse_boot2.c \
				parse_boot2.h \
				parse_boot3.c \
				parse_boot3.h

# --- UniCC Bootstrap phase 0 --------------------------------------------------
#
# First we need to compile min_lalr1, which is a stand-alone parser generator
# that was written for experimental reasons before UniCC, but is needed by
# UniCC to bootstrap.
#

boot_min_lalr1_SOURCES = min_lalr1/min_lalr1.c

# --- UniCC Bootstrap phase 1 --------------------------------------------------
#
# This phase uses the experimental min_lalr1 Parser Generator to build a
# rudimentary parser for UniCC. min_lalr1 must be installed and in the PATH.
#

unicc_boot1_SOURCES = parse_boot1.c $(SOURCES)
unicc_boot1_CFLAGS = -DUNICC_BOOTSTRAP=1

parse_boot1.c: parse.min boot_min_lalr1$(EXEEXT)
	./boot_min_lalr1$(EXEEXT) parse.min >$@ 2>/dev/null

# --- UniCC Bootstrap phase 2 --------------------------------------------------
#
# In this phase, the parser generated by min_lalr1 is will be used to parse the
# grammar definition of the UniCC parser (parse.par)
#

unicc_boot2_SOURCES = parse_boot2.c $(SOURCES)
unicc_boot2_CFLAGS = -DUNICC_BOOTSTRAP=2
#unicc_boot2_DEPENDENCIES = unicc_boot1$(EXEEXT)

parse_boot2.c parse_boot2.h: parse.par unicc_boot1$(EXEEXT)
	./unicc_boot1$(EXEEXT) -svwb parse_boot2 parse.par

# --- UniCC Bootstrap phase 3 --------------------------------------------------
#
# In this phase, the UniCC parser compiled by UniCC will be used to build
# itself.
#

unicc_boot3_SOURCES = parse_boot3.c $(SOURCES)
unicc_boot3_CFLAGS = -DUNICC_BOOTSTRAP=3
#unicc_boot3_DEPENDENCIES = unicc_boot2$(EXEEXT)

parse_boot3.c parse_boot3.h: parse.par unicc_boot2$(EXEEXT)
	./unicc_boot2$(EXEEXT) -svwb parse_boot3 parse.par

endif

# --- UniCC Final Build --------------------------------------------------------
#
# Using the third bootstrap phase, the final UniCC executable is built.
#

unicc_SOURCES = parse.c $(SOURCES)
#unicc_DEPENDENCIES = unicc_boot3$(EXEEXT)

if WITH_BOOTSTRAP
parse.c parse.h: parse.par unicc_boot3$(EXEEXT)
	./unicc_boot3$(EXEEXT) -svwb parse parse.par
endif

