// Whitespace ------------------------------------------------------------------

%skip			/[ \t\r\n]+/
%skip			/\/\/[^\n]*\n/
%skip			/\/\*([^*]|\*[^\/])*\*\/|\/\/[^\n]*\n|#[^\n]*\n/

// Terminals -------------------------------------------------------------------

@Identifier		:= /[A-Za-z_][A-Za-z0-9_]*/

@CCL 			:= /\[(\\.|[^\\\]])*\]/
@String 		:= /'[^']*'/
@Token			:= /"[^"]*"/
@Regex 			:= /\/(\\.|[^\\\/])*\//

#@Code			:= /{{([^}]|}[^}])*}}/

#@Int			:= /[0-9]+/
#@Function		:= /[A-Za-z_][A-Za-z0-9_]*\(\)/

@Flag_goal		:= '$'
@Flag_ignore	:= /%(ignore|skip)/

// Nonterminals ----------------------------------------------------------------

@colon          : ':=' = emitsdef
                | ':'

@emits          := '=' Identifier

@terminal		: CCL | String | Token | Regex

@inline			:= '(' alternation ')'

@variable		:= Identifier

@symbol 		: variable
				| terminal
				| inline

@modifier		: symbol '*' = kle
				| symbol '+' = pos
				| symbol '?' = opt
				| symbol

@sequence		: sequence modifier
				| modifier

@rule		 	:= sequence? emits?

@alternation	: rule ('|' rule)+
				| rule

@definition		: '@' variable Flag_goal? colon alternation	= definition
				| Flag_ignore ( terminal | variable )+

@assocdef		: '<' terminal+	= assoc_left
				| '>' terminal+	= assoc_right
				| '^' terminal+	= assoc_none

@grammar	$	: (definition | assocdef)+
